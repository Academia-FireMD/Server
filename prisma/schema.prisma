// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Comunidad {
  MADRID
  VALENCIA
  MURCIA
}

enum Dificultad {
  BASICO
  INTERMEDIO
  DIFICIL
}

enum SeguridadAlResponder {
  CINCUENTA_POR_CIENTO
  SETENTA_Y_CINCO_POR_CIENTO
  CIEN_POR_CIENTO
}

enum Rol {
  ADMIN
  ALUMNO
}

enum TestStatus {
  CREADO
  EMPEZADO
  FINALIZADO
}

model Test {
  id            Int            @id @default(autoincrement())
  testPreguntas TestPregunta[]
  realizador    Usuario        @relation(fields: [realizadorId], references: [id])
  realizadorId  Int
  status        TestStatus     @default(CREADO)
  respuestas    Respuesta[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  duration      Int?
  endsAt        DateTime?
}

model Pregunta {
  id                     Int                   @id @default(autoincrement())
  identificador          String                @unique
  relevancia             Comunidad[]
  dificultad             Dificultad
  tema                   Tema                  @relation(fields: [temaId], references: [id])
  temaId                 Int
  descripcion            String
  solucion               String
  respuestas             String[]
  respuestaCorrectaIndex Int
  seguridad              SeguridadAlResponder? @default(CIEN_POR_CIENTO)
  testPreguntas          TestPregunta[]
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  Respuesta              Respuesta[]
  Feedback               Feedback[]
  ReporteFallo           ReporteFallo[]
}

model Tema {
  id          Int        @id @default(autoincrement())
  numero      Int
  descripcion String?
  categoria   String?
  preguntas   Pregunta[] // Relaci√≥n con Pregunta
}

model TestPregunta {
  id         Int      @id @default(autoincrement())
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     Int
  pregunta   Pregunta @relation(fields: [preguntaId], references: [id])
  preguntaId Int
  createdAt  DateTime @default(now())
}

model Respuesta {
  id            Int                   @id @default(autoincrement())
  test          Test                  @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        Int
  pregunta      Pregunta              @relation(fields: [preguntaId], references: [id])
  preguntaId    Int
  respuestaDada Int
  esCorrecta    Boolean
  seguridad     SeguridadAlResponder? @default(CIEN_POR_CIENTO)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model Usuario {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  contrasenya  String
  rol          Rol            @default(ALUMNO)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  validated    Boolean        @default(false)
  tests        Test[]
  comunidad    Comunidad      @default(VALENCIA)
  Feedback     Feedback[]
  ReporteFallo ReporteFallo[]
}

model Feedback {
  id                  Int        @id @default(autoincrement())
  pregunta            Pregunta   @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  preguntaId          Int
  usuario             Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId           Int
  dificultadPercibida Dificultad
  comentario          String? // Campo opcional para comentarios adicionales del usuario
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model ReporteFallo {
  id          Int      @id @default(autoincrement())
  pregunta    Pregunta @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  preguntaId  Int
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   Int
  descripcion String // Detalles del fallo reportado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

enum FactorName {
  PREGUNTAS_MALAS_PIVOT
}

model Factor {
  id    FactorName @id
  value Int
}
