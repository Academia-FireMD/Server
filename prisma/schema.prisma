// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Comunidad {
  MADRID
  VALENCIA
  MURCIA
}

enum Dificultad {
  BASICO
  INTERMEDIO
  DIFICIL
}

enum SeguridadAlResponder {
  CINCUENTA_POR_CIENTO
  SETENTA_Y_CINCO_POR_CIENTO
  CIEN_POR_CIENTO
}

enum Rol {
  ADMIN
  ALUMNO
}

enum TestStatus {
  CREADO
  EMPEZADO
  FINALIZADO
}

model Test {
  id            Int            @id @default(autoincrement())
  testPreguntas TestPregunta[]
  realizador    Usuario        @relation(fields: [realizadorId], references: [id])
  realizadorId  Int
  status        TestStatus     @default(CREADO)
  respuestas    Respuesta[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  duration      Int?
  endsAt        DateTime?
}

model Pregunta {
  id                     Int                   @id @default(autoincrement())
  identificador          String                @unique
  relevancia             Comunidad[]
  dificultad             Dificultad
  tema                   Tema                  @relation(fields: [temaId], references: [id])
  temaId                 Int
  descripcion            String
  solucion               String
  respuestas             String[]
  respuestaCorrectaIndex Int
  seguridad              SeguridadAlResponder? @default(CIEN_POR_CIENTO)
  testPreguntas          TestPregunta[]
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  Respuesta              Respuesta[]
  Feedback               Feedback[]
  ReporteFallo           ReporteFallo[]
}

model FlashcardTest {
  id         Int                 @id @default(autoincrement())
  realizador Usuario             @relation(fields: [realizadorId], references: [id], onDelete: Cascade)
  realizadorId  Int
  flashcards FlashcardTestItem[] // Relación con cascada en FlashcardTestItem
  status     TestStatus          @default(CREADO)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model FlashcardTestItem {
  id          Int                  @id @default(autoincrement())
  flashcard   FlashcardData        @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId Int
  test        FlashcardTest        @relation(fields: [testId], references: [id], onDelete: Cascade)  // Asegurar cascada aquí
  testId      Int
  respuesta   FlashcardRespuesta?  // Relación opcional
  createdAt   DateTime             @default(now())
}

model FlashcardRespuesta {
  id          Int               @id @default(autoincrement())
  flashcard   FlashcardData     @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId Int
  testItem    FlashcardTestItem @relation(fields: [testItemId], references: [id], onDelete: Cascade) // Asegurar cascada aquí
  testItemId  Int               @unique  
  estado      EstadoFlashcard   @default(REVISAR)
  createdAt   DateTime          @default(now())
}

model FlashcardData {
  id                 Int                  @id @default(autoincrement())
  identificador      String               @unique
  relevancia         Comunidad[]
  dificultad         Dificultad
  tema               Tema                 @relation(fields: [temaId], references: [id])
  temaId             Int
  descripcion        String
  solucion           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Feedback           Feedback[]
  ReporteFallo       ReporteFallo[]
  FlashcardTestItem  FlashcardTestItem[]
  FlashcardRespuesta FlashcardRespuesta[]
}

enum EstadoFlashcard {
  BIEN
  MAL
  REVISAR
}

model Tema {
  id            Int             @id @default(autoincrement())
  numero        Int
  descripcion   String?
  categoria     String?
  preguntas     Pregunta[] // Relación con Pregunta
  createdAt     DateTime        @default(now())
  FlashcardData FlashcardData[]
}

model TestPregunta {
  id         Int      @id @default(autoincrement())
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     Int
  pregunta   Pregunta @relation(fields: [preguntaId], references: [id])
  preguntaId Int
  createdAt  DateTime @default(now())
}

enum EstadoPregunta {
  NO_RESPONDIDA
  RESPONDIDA
  OMITIDA
}

model Respuesta {
  id            Int                   @id @default(autoincrement())
  test          Test                  @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        Int
  pregunta      Pregunta              @relation(fields: [preguntaId], references: [id])
  preguntaId    Int
  respuestaDada Int?
  esCorrecta    Boolean
  seguridad     SeguridadAlResponder? @default(CIEN_POR_CIENTO)
  estado        EstadoPregunta        @default(NO_RESPONDIDA) // Estado de la respuesta
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model Usuario { 
  id             Int             @id @default(autoincrement())
  email          String          @unique
  contrasenya    String
  rol            Rol             @default(ALUMNO)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  validated      Boolean         @default(false)
  tests          Test[]
  flashcardTests FlashcardTest[]
  comunidad      Comunidad       @default(VALENCIA)
  Feedback       Feedback[]
  ReporteFallo   ReporteFallo[]
}

model Feedback {
  id                  Int            @id @default(autoincrement())
  pregunta            Pregunta       @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  preguntaId          Int
  flashcard           FlashcardData? @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId         Int?
  usuario             Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId           Int
  dificultadPercibida Dificultad
  comentario          String? // Campo opcional para comentarios adicionales del usuario
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model ReporteFallo {
  id              Int            @id @default(autoincrement())
  pregunta        Pregunta?       @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  preguntaId      Int?
  usuario         Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId       Int
  descripcion     String // Detalles del fallo reportado
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  FlashcardData   FlashcardData? @relation(fields: [flashcardDataId], references: [id])
  flashcardDataId Int?
}

enum FactorName {
  PREGUNTAS_MALAS_PIVOT
  FLASHCARDS_MAL_PRIVOT
  FLASHCARDS_REPASAR_PIVOT
}

model Factor {
  id    FactorName @id
  value Int
}
